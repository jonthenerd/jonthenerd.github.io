<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on JonTheNerd</title>
    <link>http://www.jonthenerd.com/tags/powershell/</link>
    <description>Recent content in PowerShell on JonTheNerd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://www.jonthenerd.com/tags/powershell/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SharePoint 2010: Add a file to the root of your site using PowerShell</title>
      <link>http://www.jonthenerd.com/2011/08/17/sharepoint-2010-add-a-file-to-the-root-of-your-site-using-powershell/</link>
      <pubDate>Wed, 17 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/08/17/sharepoint-2010-add-a-file-to-the-root-of-your-site-using-powershell/</guid>
      <description>This can be useful when you need a file to be right off the root of your Internet facing site - files like robots.txt, sitemap.xml, or the verification file for Google Webmaster tools. We&amp;rsquo;ll take advantage of PowerShell&amp;rsquo;s ability to use any .NET methods along with the Files collection on each SPWeb in SharePoint. $fileBytes = [system.io.file]::ReadAllBytes(&amp;quot;c:\the\full\path\to\your\file.txt&amp;quot;); $site = Get-SPSite &amp;quot;http://yourdomain:portifneeded&amp;quot;; $site.RootWeb.Files.Add(&amp;quot;file.txt&amp;quot;, $fileBytes, $true); This will result in a file.txt located at &amp;ldquo;http://yourdomain:portifneeded/file.</description>
    </item>
    
    <item>
      <title>SharePoint 2010: Finding the largest document library in a site collection</title>
      <link>http://www.jonthenerd.com/2011/08/16/sharepoint-2010-findinglargestdoclibrary/</link>
      <pubDate>Tue, 16 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/08/16/sharepoint-2010-findinglargestdoclibrary/</guid>
      <description>SharePoint 2007 came with a page (storman.aspx) dedicated to showing you how much space each of the lists in your site collection were taking up. SharePoint 2010 removed this page. Luckily, SharePoint 2010 SP1 added it back in. But what if you&amp;rsquo;re still haven&amp;rsquo;t updated to SP1 and you&amp;rsquo;re getting warnings/errors about running out of space?
Obviously - up the space so as to avoid additional noise from your users. Then - figure out which libraries are taking up the most space.</description>
    </item>
    
    <item>
      <title>SharePoint 2010: Unable to delete site/web after SP1</title>
      <link>http://www.jonthenerd.com/2011/08/11/sharepoint-2010-unable-to-delete-siteweb-after-sp1/</link>
      <pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/08/11/sharepoint-2010-unable-to-delete-siteweb-after-sp1/</guid>
      <description>&lt;p&gt;While doing some testing after upgrading my dev machine to SP1, I ran into two
separate issues when trying to delete a web through the UI by using the &amp;ldquo;Sites
and Workspaces&amp;rdquo; link in Site Settings. Deleting through powershell worked fine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SharePoint 2010: Disable Feature on all Web Applications PowerShell</title>
      <link>http://www.jonthenerd.com/2011/07/21/sharepoint-2010-disable-feature-on-all-web-applications-powershell/</link>
      <pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/07/21/sharepoint-2010-disable-feature-on-all-web-applications-powershell/</guid>
      <description>Because it&amp;rsquo;s easier to copy+paste this later&amp;hellip; This will disable a feature on all web applications in a farm. Very convenient for when you&amp;rsquo;re removing a feature from a solution.
Get-SPWebApplication | ForEach-Object {Disable-SPFeature &amp;#34;Solution.Name.FeatureName&amp;#34; -url $_.Url;} </description>
    </item>
    
    <item>
      <title>SharePoint 2010: Remove existing reusable content items using PowerShell</title>
      <link>http://www.jonthenerd.com/2011/07/06/sharepoint-2010-remove-existing-reusable-content-items-using-powershell/</link>
      <pubDate>Wed, 06 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/07/06/sharepoint-2010-remove-existing-reusable-content-items-using-powershell/</guid>
      <description>This same PowerShell could be used for any other list to remove all of the items. I just needed it to remove the OOB reusable content.
$siteColTemp = Get-SPSite &amp;#34;http://yourSiteCollectionUrl&amp;#34;; $reusableContentList = $siteColTemp.RootWeb.Lists[&amp;#34;Reusable Content&amp;#34;]; $reusableContentItems = $reusableContentList.Items; $reusableContentItemsCount = $reusableContentItems.Count; for($x=$reusableContentItemsCount-1;$x -ge 0; $x--){ $reusableContentItems[$x].Delete(); } </description>
    </item>
    
    <item>
      <title>Easy SharePoint 2010 warmup Script using PowerShell</title>
      <link>http://www.jonthenerd.com/2011/04/19/easy-sharepoint-2010-warmup-script-using-powershell/</link>
      <pubDate>Tue, 19 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.jonthenerd.com/2011/04/19/easy-sharepoint-2010-warmup-script-using-powershell/</guid>
      <description>This idea comes from Kirk Hofer&amp;rsquo;s blog, but modfied to use the SharePoint 2010 powershell commandlets and not care about specifying credentials in the script. I figured most people would just keep using the credentials specified in their scheduled task. The script loads the SharePoint plugin, enumerates the zones, and sends a request to each one.
Add-PSSnapin Microsoft.SharePoint.PowerShell; function Get-WebPage([string]$url) { $wc = new-object net.webclient; $wc.credentials = [System.Net.CredentialCache]::DefaultCredentials; $pageContents = $wc.</description>
    </item>
    
  </channel>
</rss>
